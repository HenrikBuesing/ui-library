{"version":3,"file":"bundle.mjs","sources":["../../../packages/src/utils/useInjectStyles.ts","../../../packages/src/hooks/getColor.ts","../../../packages/src/components/button/customButton.tsx","../../../packages/src/components/checkbox/customCheckBox.tsx","../../../packages/src/components/images/svgIcon.tsx","../../../packages/src/components/input/baseInput.tsx","../../../packages/src/hooks/clickOutside.ts","../../../packages/src/components/input/customInput.tsx","../../../packages/src/enums/passwordRuleTypes.ts","../../../packages/src/components/input/passwordInput.tsx","../../../packages/src/enums/modalType.ts","../../../packages/src/components/modal/baseModal.tsx","../../../packages/src/components/modal/notifyModal.tsx","../../../packages/src/components/modal/questionModal.tsx","../../../packages/src/components/radio/customRadio.tsx","../../../packages/src/utils/generateKey.ts"],"sourcesContent":["import {RefObject, useEffect} from \"react\";\r\nimport styles from \"./styles.scss\";\r\n\r\nconst injectedStyles: Document[] = [];\r\n\r\nexport default function useInjectStyleSheet(nodeRef: RefObject<HTMLElement>): void {\r\n  useEffect(() => {\r\n    const parentDocument = nodeRef.current ? nodeRef.current.ownerDocument : document;\r\n\r\n    if (typeof parentDocument !== \"undefined\" && !injectedStyles.includes(parentDocument)) {\r\n      const styleElement = parentDocument.createElement(\"style\");\r\n\r\n      styleElement.innerHTML = styles;\r\n      injectedStyles.push(parentDocument);\r\n\r\n      parentDocument.head.appendChild(styleElement);\r\n    }\r\n  }, []);\r\n}","export function useGetColor(backgroundColor: string) {\r\n  if (backgroundColor.length !== 7) throw new Error('provided hex color must be 7 characters (including #) long');\r\n\r\n  backgroundColor = backgroundColor.substring(1, 7);\r\n  const uiColors = [\r\n    parseInt(backgroundColor.substring(0, 2), 16) / 255,\r\n    parseInt(backgroundColor.substring(2, 4), 16) / 255,\r\n    parseInt(backgroundColor.substring(4, 6), 16) / 255\r\n  ];\r\n  const c = uiColors.map(col => {\r\n    return col <= 0.03928? (col / 12.92) : Math.pow((col + 0.055) / 1.055, 2.4);\r\n  });\r\n  const contrast = (0.2126 * c[0]) + (0.7152 * c[1]) + (0.0722 * c[2]);\r\n\r\n  return contrast > 0.179 ? '#000000' : '#ffffff';\r\n}","import React, {ComponentPropsWithoutRef, CSSProperties, useRef} from 'react';\r\nimport useInjectStyleSheet from \"utils/useInjectStyles\";\r\nimport {useGetColor} from 'hooks/getColor';\r\n\r\ntype HEXColor = `#${string}`\r\n\r\ninterface ICustomButton extends ComponentPropsWithoutRef<'button'> {\r\n  label    : string;\r\n  disabled?: boolean;\r\n  small?   : boolean;\r\n  theme?   : HEXColor | 'success' | 'warning' | 'error';\r\n}\r\n\r\nexport function CustomButton(props: ICustomButton) {\r\n  const {\r\n    disabled = false,\r\n    label,\r\n    small = false,\r\n    theme,\r\n    ...buttonProps\r\n  } = props;\r\n\r\n  const nodeRef = useRef<HTMLButtonElement>(null);\r\n  useInjectStyleSheet(nodeRef);\r\n\r\n  function getStyle(): CSSProperties | undefined {\r\n    if (disabled || !theme) return undefined;\r\n\r\n    if (theme.includes('#')) {\r\n      return {\r\n        color: useGetColor(theme),\r\n        backgroundColor: theme,\r\n        border: 'transparent'\r\n      };\r\n    }\r\n\r\n    switch (theme) {\r\n      case 'success':\r\n        return {\r\n          color: useGetColor('#006A4E'),\r\n          backgroundColor: '#006A4E',\r\n          border: 'transparent'\r\n        };\r\n      case 'warning':\r\n        return {\r\n          color: '#000000',\r\n          backgroundColor: '#FFD700',\r\n          border: 'transparent'\r\n        };\r\n      case 'error':\r\n        return {\r\n          color: useGetColor('#800020'),\r\n          backgroundColor: '#800020',\r\n          border: 'transparent'\r\n        };\r\n      default:\r\n        throw new Error('invalid theme provided')\r\n    }\r\n  }\r\n\r\n  function getClassName(): string {\r\n    const base = 'uil-button uil-fit'\r\n\r\n    if (disabled && !small) {\r\n      return `${base} uil-font-base uil-disabled`;\r\n    }\r\n\r\n    if (disabled && small) {\r\n      return `${base} uil-disabled uil-small`;\r\n    }\r\n\r\n    if (small) {\r\n      return `${base} uil-small`;\r\n    }\r\n\r\n    return `${base} uil-font-base`;\r\n  }\r\n\r\n  return (\r\n    <button className={getClassName()} style={getStyle()} disabled={disabled} {...buttonProps} ref={nodeRef}>\r\n      {label}\r\n    </button>\r\n  );\r\n}","import React, {ComponentPropsWithoutRef, ReactNode, useRef} from 'react';\r\nimport useInjectStyleSheet from \"utils/useInjectStyles\";\r\n\r\ninterface ICustomCheckbox extends ComponentPropsWithoutRef<'input'> {\r\n  checked     : boolean;\r\n  label?      : string;\r\n  toggleCheck : (value: boolean) => void;\r\n  checkColor? : string;\r\n  children?   : ReactNode;\r\n}\r\n\r\nexport function CustomCheckBox(props: ICustomCheckbox) {\r\n  const {\r\n    checkColor,\r\n    checked,\r\n    toggleCheck,\r\n    label,\r\n    children,\r\n    ...checkProps\r\n  } = props;\r\n\r\n  const nodeRef = useRef<HTMLDivElement>(null);\r\n  useInjectStyleSheet(nodeRef);\r\n\r\n  return (\r\n    <div className={'uil-check-wrapper'} ref={nodeRef}>\r\n      <label className={'uil-checkbox uil-check'}>\r\n        <input type={'checkbox'} checked={checked} onChange={() => {toggleCheck(!checked)}} {...checkProps}/>\r\n        <div className={'uil-checkmark'} style={{backgroundColor: checkColor}}/>\r\n      </label>\r\n\r\n      {children ? children : <span onClick={() => toggleCheck(!checked)} style={{cursor: 'pointer', userSelect: 'none'}}>{label}</span>}\r\n    </div>\r\n  );\r\n}","import React, {ComponentPropsWithoutRef, CSSProperties, useRef} from 'react';\r\nimport useInjectStyleSheet from \"utils/useInjectStyles\";\r\n\r\ninterface ISvgIcon extends ComponentPropsWithoutRef<'svg'>{\r\n  src    : string;\r\n  color? : string | undefined;\r\n  height?: number;\r\n  width? : number;\r\n}\r\n\r\nexport function SVG(props: ISvgIcon) {\r\n  const {\r\n    src,\r\n    color,\r\n    height,\r\n    width\r\n  } = props;\r\n\r\n  if (!src.includes('.svg')) {\r\n    throw new Error('Provided src is not an svg image');\r\n  }\r\n\r\n  const nodeRef = useRef<HTMLDivElement>(null);\r\n  useInjectStyleSheet(nodeRef);\r\n\r\n  const style: CSSProperties = {\r\n    fill: color,\r\n    height: `${height}px`,\r\n    width: `${width}px`\r\n  }\r\n\r\n  return (\r\n    <div ref={nodeRef} className={'uil-svg-wrapper'}>\r\n      <svg aria-hidden={true} className={'uil-svg'} style={style}>\r\n        <use href={src}/>\r\n      </svg>\r\n    </div>\r\n  );\r\n}","import React, {ComponentPropsWithoutRef, useRef} from 'react';\r\nimport {SVG} from 'components/images/svgIcon';\r\nimport useInjectStyleSheet from \"../../utils/useInjectStyles\";\r\n\r\nexport interface IBaseInput extends ComponentPropsWithoutRef<'input'> {\r\n  label       : string;\r\n  value       : string;\r\n  valueChanged: (value: string) => void;\r\n  iconColor?  : string;\r\n  iconSrc?    : string;\r\n  inputColor? : string;\r\n  toggle?     : () => void;\r\n}\r\n\r\nexport function BaseInput(props: IBaseInput) {\r\n  const {\r\n    iconColor,\r\n    iconSrc,\r\n    inputColor,\r\n    label,\r\n    toggle,\r\n    valueChanged,\r\n    ...inputProps\r\n  } = props;\r\n\r\n  const nodeRef = useRef<HTMLLabelElement>(null);\r\n  useInjectStyleSheet(nodeRef);\r\n\r\n  return (\r\n    <label className={'uil-input-wrapper'} htmlFor={inputProps.id} ref={nodeRef}>\r\n      <input\r\n        className={'uil-input uil-font-base'}\r\n        onChange={(e) => valueChanged(e.target.value)}\r\n        placeholder={label}\r\n        style={{color: inputColor}}\r\n        {...inputProps}\r\n      />\r\n\r\n      {iconSrc &&\r\n        <div className={'uil-icon'} onClick={toggle}>\r\n          <SVG src={iconSrc} width={24} height={24} color={iconColor}/>\r\n        </div>\r\n      }\r\n\r\n      <span className={'uil-label uil-font-base'} style={{color: inputColor}}>{label}</span>\r\n    </label>\r\n  );\r\n}","import {useEffect, useRef} from 'react';\r\n\r\nexport function useClickOutsideRef<T extends HTMLElement>(callback: () => void) {\r\n  const ref = useRef<T>(null);\r\n\r\n  useEffect(() => {\r\n    if (!ref.current) return;\r\n\r\n    function handleClickOutside (event: MouseEvent | TouchEvent) {\r\n      if (ref.current && !ref.current.contains(event.target as Node)) {\r\n        callback();\r\n      }\r\n    }\r\n\r\n    document.addEventListener('click', handleClickOutside);\r\n    document.addEventListener('touchend', handleClickOutside);\r\n\r\n    return () => {\r\n      document.removeEventListener('click', handleClickOutside);\r\n      document.removeEventListener('touchend', handleClickOutside);\r\n    };\r\n  }, [callback]);\r\n\r\n  return ref;\r\n}","import React, {useState} from 'react';\r\nimport {BaseInput, IBaseInput} from './baseInput';\r\nimport {SVG} from 'components/images/svgIcon';\r\nimport {useClickOutsideRef} from 'hooks/clickOutside';\r\n\r\nexport interface ICustomInput extends IBaseInput {\r\n  tooltipClose?: string;\r\n  tooltipIcon? : string;\r\n  tooltipText? : string;\r\n}\r\n\r\nexport function CustomInput(props: ICustomInput) {\r\n  const {\r\n    tooltipClose,\r\n    tooltipIcon,\r\n    tooltipText,\r\n    ...inputProps\r\n  } = props;\r\n\r\n  const [tooltipVisible, setTooltipVisible] = useState(false);\r\n  const ref = useClickOutsideRef<HTMLDivElement>(closeTooltip);\r\n\r\n  function closeTooltip() {\r\n    setTooltipVisible(false);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {tooltipIcon ?\r\n        <div className={'uil-tooltip-wrapper'} ref={ref}>\r\n          {tooltipVisible &&\r\n            <div className={'uil-tooltip'}>\r\n              {tooltipClose &&\r\n                <button className={'uil-tooltip-button uil-fit'} onClick={closeTooltip}>\r\n                  {tooltipClose}\r\n                </button>\r\n              }\r\n\r\n              <span>{tooltipText}</span>\r\n            </div>\r\n          }\r\n\r\n          <div className={'uil-tooltip-icon uil-fit'} onClick={() => setTooltipVisible(!tooltipVisible)}>\r\n            <SVG src={tooltipIcon} height={16} width={16}/>\r\n          </div>\r\n\r\n          <BaseInput {...inputProps}/>\r\n        </div> :\r\n\r\n        <BaseInput {...inputProps}/>\r\n      }\r\n    </>\r\n  );\r\n}","export enum PasswordRuleTypes {\r\n  minLength = 1,\r\n  maxLength,\r\n  letters,\r\n  numbers,\r\n  special,\r\n  upper\r\n}","import React, {useEffect, useState} from 'react';\r\nimport {CustomInput, ICustomInput} from './customInput';\r\nimport {SVG} from 'components/images/svgIcon';\r\nimport {PasswordRuleTypes} from 'enums/passwordRuleTypes';\r\n\r\ninterface IPasswordInput extends ICustomInput {\r\n  ruleChecked     : string;\r\n  rules           : PasswordRule[];\r\n  ruleUnchecked   : string;\r\n  capsLockWarning?: string;\r\n  setFailedRules? : (value: PasswordRule[]) => void;\r\n}\r\n\r\nexport interface PasswordRule {\r\n  label   : string;\r\n  count?  : number;\r\n  type?   : PasswordRuleTypes;\r\n  pattern?: string;\r\n}\r\n\r\nexport function PasswordInput(props: IPasswordInput) {\r\n  const {\r\n    capsLockWarning,\r\n    rules,\r\n    ruleChecked,\r\n    ruleUnchecked,\r\n    setFailedRules,\r\n    ...inputProps\r\n  } = props;\r\n\r\n  const [capsLock, setCapsLock] = useState(false);\r\n\r\n  useEffect(() => {\r\n    validateInput();\r\n  }, [props.value]);\r\n\r\n  useEffect(() => {\r\n    if (!capsLockWarning) return;\r\n\r\n    function setCapsLockState(event: globalThis.KeyboardEvent) {\r\n      setCapsLock(event.getModifierState?.('CapsLock'));\r\n    }\r\n\r\n    document.addEventListener('keydown', setCapsLockState);\r\n\r\n    return () => document.removeEventListener('keydown', setCapsLockState);\r\n  }, []);\r\n\r\n  function validateInput() {\r\n    const failedRules: PasswordRule[] = [];\r\n\r\n    rules.forEach(rule => {\r\n      if (!checkRule(rule)) {\r\n        failedRules.push(rule);\r\n      }\r\n    });\r\n\r\n    setFailedRules?.(failedRules);\r\n  }\r\n\r\n  function checkRule(rule: PasswordRule): boolean {\r\n    let pattern: string;\r\n\r\n    if (rule.type) {\r\n      if (!rule.count) throw new Error('count must not be empty if a type is provided');\r\n\r\n      switch (rule.type) {\r\n        case PasswordRuleTypes.minLength:\r\n          pattern = `[a-zA-Z0-9ßÄäÖöÜü._!\"\\`'#%&§,:;<>=@{}~\\\\$\\\\(\\\\)\\\\*\\\\+\\\\/\\\\\\\\\\\\?\\\\[\\\\]\\\\^\\\\|\\\\-]{${rule.count},}`;\r\n          break;\r\n        case PasswordRuleTypes.maxLength:\r\n          pattern = `^[a-zA-Z0-9ßÄäÖöÜü._!\"\\`'#%&,:;<>=@{}~\\\\$\\\\(\\\\)\\\\*\\\\+\\\\/\\\\\\\\\\\\?\\\\[\\\\]\\\\^\\\\|\\\\-]{0,${rule.count}}$`;\r\n          break;\r\n        case PasswordRuleTypes.letters:\r\n          pattern = `[a-zA-ZßÄäÖöÜü]{${rule.count},}`;\r\n          break;\r\n        case PasswordRuleTypes.numbers:\r\n          pattern = `[0-9]{${rule.count},}`;\r\n          break;\r\n        case PasswordRuleTypes.special:\r\n          pattern = `[._!\"\\`'#%&§,:;<>=@{}~\\\\$\\\\(\\\\)\\\\*\\\\+\\\\/\\\\\\\\\\\\?\\\\[\\\\]\\\\^\\\\|\\\\-]{${rule.count},}`;\r\n          break;\r\n        case PasswordRuleTypes.upper:\r\n          pattern = `[A-ZÄÖÜ]{${rule.count},}`;\r\n          break;\r\n        default:\r\n          throw new Error('unrecognized rule type provided');\r\n      }\r\n    } else {\r\n      pattern = rule.pattern ? rule.pattern : '';\r\n    }\r\n\r\n    if (pattern === '') throw new Error('pattern must not be an empty string');\r\n\r\n    const reg = new RegExp(pattern);\r\n    return reg.test(props.value);\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <CustomInput {...inputProps}/>\r\n\r\n      <div className={'uil-password-rules'}>\r\n        {capsLock &&\r\n          <div className={'uil-password-rule'}>{capsLockWarning}</div>\r\n        }\r\n\r\n        {rules.map((rule, idx) =>\r\n          <div key={idx} className={'uil-password-rule'}>\r\n            <SVG src={checkRule(rule) ? ruleChecked : ruleUnchecked} height={12} width={12}/>\r\n\r\n            <span>{rule.label}</span>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </>\r\n  );\r\n}","export enum ModalType {\r\n  error = 'error',\r\n  question = 'question',\r\n  success = 'success',\r\n  warning = 'warning',\r\n}","import React, {useEffect, useRef} from 'react';\r\nimport {ModalType} from 'enums/modalType';\r\nimport {CustomButton} from 'components/button/customButton';\r\nimport useInjectStyleSheet from \"utils/useInjectStyles\";\r\n\r\ninterface IBaseModal {\r\n  close        : () => void;\r\n  message      : string | string[];\r\n  title        : string;\r\n  type         : ModalType;\r\n  callback?    : (() => void) | undefined;\r\n  cancelLabel? : string;\r\n  closeLabel?  : string;\r\n  confirm?     : () => void;\r\n  confirmLabel?: string;\r\n  timeout?     : number;\r\n}\r\n\r\nexport function BaseModal(props: IBaseModal) {\r\n  const {\r\n    callback,\r\n    cancelLabel = '',\r\n    close,\r\n    closeLabel,\r\n    confirm,\r\n    confirmLabel = '',\r\n    message,\r\n    timeout,\r\n    title,\r\n    type\r\n  } = props;\r\n\r\n  let timer: NodeJS.Timeout | undefined = undefined;\r\n  const nodeRef = useRef<HTMLDivElement>(null);\r\n  useInjectStyleSheet(nodeRef);\r\n\r\n  useEffect(() => {\r\n    if (!timeout) return;\r\n\r\n    timer = setTimeout(() => {\r\n      return callback ? callback() : close();\r\n    }, timeout);\r\n\r\n    return () => clearTimeout(timer);\r\n  },[]);\r\n\r\n  function setHeaderClass() {\r\n    const base = 'uil-header';\r\n\r\n    switch (type) {\r\n      case ModalType.error:\r\n        return `${base} uil-error`;\r\n      case ModalType.success:\r\n        return `${base} uil-success`;\r\n      case ModalType.warning:\r\n        return `${base} uil-warning`;\r\n      default:\r\n        return base;\r\n    }\r\n  }\r\n\r\n  //run callback if timeout and callback are set, otherwise close\r\n  function handleClose() {\r\n    // clearTimeout(timer)\r\n    timeout && callback ? callback() : close();\r\n  }\r\n\r\n  return (\r\n    <div className={'uil-modal-wrapper'} ref={nodeRef}>\r\n      <div className={'uil-modal'}>\r\n        <div className={setHeaderClass()}>\r\n          {title}\r\n        </div>\r\n\r\n        {timeout &&\r\n          <div className={'uil-progress-wrapper'}>\r\n            <div className={'uil-progress-bar'} style={{animationDuration: `${(timeout / 1000) + .5}s`}}/>\r\n          </div>\r\n        }\r\n\r\n        <div className={'uil-content'}>\r\n          <div>\r\n            {Array.isArray(message) ?\r\n              message.map((m, idx) => <p key={idx} className={'uil-modal-text'}>{m}</p>)\r\n              : <p className={'uil-modal-text'}>{message}</p>\r\n            }\r\n          </div>\r\n\r\n          <div className={`uil-button-wrapper ${type !== ModalType.question ? 'uil-single' : ''}`}>\r\n            {type !== ModalType.question &&\r\n              <CustomButton label={closeLabel?? ''} onClick={handleClose} type={'button'}/>\r\n            }\r\n\r\n            {type == ModalType.question && props.confirm &&\r\n              <>\r\n                <CustomButton label={confirmLabel} theme={'#00416A'} onClick={confirm} type={'button'}/>\r\n                <CustomButton label={cancelLabel} onClick={close} type={'button'}/>\r\n              </>\r\n            }\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\nimport {BaseModal} from './baseModal';\r\nimport {ModalType} from 'enums/modalType';\r\n\r\nexport interface INotifyModal {\r\n  close     : () => void;\r\n  closeLabel: string;\r\n  modalType : 'success' | 'warning' | 'error';\r\n  message   : string | string[];\r\n  title     : string;\r\n  callback? : (() => void) | undefined;\r\n  timeout?  : number;\r\n}\r\n\r\nexport function NotifyModal(props: INotifyModal) {\r\n  const {\r\n    modalType,\r\n    ...modalProps\r\n  } = props;\r\n\r\n  return (\r\n    <BaseModal type={modalType as ModalType} {...modalProps}/>\r\n  );\r\n}","import React from 'react';\r\nimport {BaseModal} from './baseModal';\r\nimport {ModalType} from 'enums/modalType';\r\n\r\nexport interface IQuestionModal {\r\n  cancel      : () => void;\r\n  cancelLabel : string;\r\n  confirm     : () => void;\r\n  confirmLabel: string;\r\n  message     : string | string[];\r\n  title       : string;\r\n}\r\n\r\nexport function QuestionModal(props: IQuestionModal) {\r\n  const {\r\n    cancel,\r\n    ...modalProps\r\n  } = props;\r\n\r\n  return (\r\n    <BaseModal type={ModalType.question} close={cancel} {...modalProps}/>\r\n  );\r\n}","import React, {useEffect, useRef} from 'react';\r\nimport generateKey from 'utils/generateKey';\r\nimport useInjectStyleSheet from \"utils/useInjectStyles\";\r\n\r\ninterface ICustomRadio {\r\n  options     : RadioOption[];\r\n  value       : string;\r\n  valueChanged: (value: string) => void;\r\n  checkColor? : string;\r\n  disabled?   : boolean;\r\n  label?      : string;\r\n}\r\n\r\nexport interface RadioOption {\r\n  label    : string;\r\n  value    : string;\r\n  checked? : boolean;\r\n  disabled?: boolean;\r\n}\r\n\r\nexport function CustomRadio(props: ICustomRadio) {\r\n  const {\r\n    checkColor,\r\n    disabled,\r\n    label,\r\n    options,\r\n    value,\r\n    valueChanged,\r\n  } = props;\r\n\r\n  const nodeRef = useRef<HTMLDivElement>(null);\r\n  useInjectStyleSheet(nodeRef);\r\n\r\n  useEffect(() => {\r\n    // prevents multiple radio options being checked at the same time\r\n    options.forEach(option => {\r\n      if (option.checked) handleRadioChange(option.value);\r\n    });\r\n  },[]);\r\n\r\n  function handleRadioChange(newValue: string) {\r\n    if (value === newValue) return;\r\n\r\n    valueChanged(newValue);\r\n  }\r\n\r\n  return (\r\n    <div ref={nodeRef}>\r\n      {label && <div className={'uil-radio-title'}>{label}</div>}\r\n\r\n      <div className={'uil-radio-wrapper'}>\r\n        {options.map((option, idx) =>\r\n          <div key={generateKey(idx)} className={'uil-radio-option'}>\r\n            <label className={'uil-radio uil-check'}>\r\n              <input\r\n                name={option.label}\r\n                type={'radio'}\r\n                value={option.value}\r\n                checked={value === option.value || value === '' && option.checked}\r\n                onChange={() => handleRadioChange(option.value)}\r\n                disabled={disabled? disabled : option.disabled}\r\n              />\r\n              <div className={'uil-checkmark uil-radio-check'} style={{backgroundColor: checkColor}}/>\r\n            </label>\r\n\r\n            <span className={'uil-font-base'}>{option.label}</span>\r\n          </div>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}","export default function generateKey(prefix: string | number) {\r\n  return `${prefix}-${new Date().getTime()}`;\r\n}"],"names":["injectedStyles","useInjectStyleSheet","nodeRef","useEffect","parentDocument","current","ownerDocument","document","includes","styleElement","createElement","innerHTML","styles","push","head","appendChild","useGetColor","backgroundColor","length","Error","substring","c","parseInt","map","col","Math","pow","_excluded","CustomButton","props","disabled","label","small","theme","buttonProps","_objectWithoutPropertiesLoose","useRef","React","_extends","className","base","getClassName","style","color","border","getStyle","ref","CustomCheckBox","checkColor","checked","toggleCheck","children","checkProps","type","onChange","onClick","cursor","userSelect","SVG","src","height","width","fill","href","BaseInput","iconColor","iconSrc","inputColor","toggle","valueChanged","inputProps","htmlFor","id","e","target","value","placeholder","useClickOutsideRef","callback","addEventListener","handleClickOutside","removeEventListener","event","contains","CustomInput","tooltipClose","tooltipIcon","tooltipText","tooltipVisible","setTooltipVisible","useState","closeTooltip","Fragment","PasswordRuleTypes","PasswordInput","capsLockWarning","rules","ruleChecked","ruleUnchecked","setFailedRules","capsLock","setCapsLock","checkRule","rule","pattern","count","minLength","maxLength","letters","numbers","special","upper","RegExp","test","failedRules","forEach","validateInput","setCapsLockState","getModifierState","idx","key","ModalType","BaseModal","cancelLabel","close","closeLabel","confirm","confirmLabel","message","timeout","title","timer","setTimeout","clearTimeout","error","success","warning","setHeaderClass","animationDuration","Array","isArray","m","question","NotifyModal","modalType","modalProps","QuestionModal","cancel","CustomRadio","options","handleRadioChange","newValue","option","prefix","Date","getTime","name"],"mappings":"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"}